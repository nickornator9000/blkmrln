import os
import shutil

class Core:

    def __init__(self,base_dir,project_name):
        self.base_dir = base_dir
        self.project_name = project_name
        self.project_dir = os.path.join(base_dir,project_name)

    def validate_directories(self,source_dirs):
        """
        Validates that the source directories exist and are directories.
        """
        invalid_dirs = []
        for source_dir in source_dirs:
            if not os.path.exists(source_dir) or not os.path.isdir(source_dir):
                invalid_dirs.append(source_dir)
        return len(invalid_dirs) == 0, invalid_dirs

    def setup_project_structure(self):
        """
        Sets up the basic project structure within the base directory.
        """
        if not os.path.exists(self.project_dir):
            os.makedirs(self.project_dir)
        else:
            "Run Setup tools and create bin dist for already existing project."
            return None
        return self.project_dir

    def create_readme(self)->None:
        """
        Creates a README file in the project directory.
        """
        readme_path = os.path.join(self.project_dir, 'README.md')
        with open(readme_path, 'w') as f:
            f.write(f"# {self.project_name}\n\nGenerated by blkmrln.\n")
        print(f"README.md created at {readme_path}")

    def initialize_git_repo(self):
        """
        Initializes a Git repository in the project directory.
        """
        if not os.path.exists(os.path.join(self.project_dir, '.git')):
            os.system(f'git init {self.project_dir}')
            print(f"Initialized empty Git repository in {self.project_dir}")
        else:
            print(f"Git repository already exists in {self.project_dir}")

    def resources_to_root(self,target_root):
        if os.path.exists(target_root) and os.path.isdir(target_root):
            destination = os.path.join(target_root, os.path.basename(target_root))
            print(f"Copying {target_root} to {destination}")
            shutil.copytree(target_root, destination, dirs_exist_ok=True)
        else:
            print(f"Skipping {target_root}: Directory does not exist or is not a directory")